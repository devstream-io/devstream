---
tools:
# name of the instance with github-repo-scaffolding-golang
- name: golang-demo
  plugin:
    # kind of the plugin
    kind: github-repo-scaffolding-golang
    # version of the plugin
    version: 0.2.0
  # options for the plugin
  options:
    # the repo's owner. It should be case-sensitive here; strictly use your GitHub user name.
    owner: DO_CHANGE_ME
    # the repo which you'd like to create
    repo: golang-demo
    # the branch of the repo you'd like to hold the code
    branch: main
    # the image repo you'd like to push the container image
    image_repo: DO_CHANGE_ME/golang-demo
- name: golang-demo-actions
  plugin:
    # name of the plugin
    kind: githubactions-golang
    # version of the plugin, checkout the version from the GitHub releases
    version: 0.2.0
  # options for the plugin
  options:
    # the repo's owner
    owner: DO_CHANGE_ME
    # the repo where you'd like to setup GitHub Actions
    repo: golang-demo
    # programming language specific settings
    language:
      name: go
      # version of the language
      version: "1.17"
    # main branch of the repo (to which branch the plugin will submit the workflows)
    branch: main
    build:
      # default to true
      enable: True
      # build command, OPTIONAL, the given value below is default value
      command: "go build ./..."
    test:
      # default to false
      enable: False
      # test command, OPTIONAL, the given value below is default value
      command: "go test ./..."
      coverage:
        # default to false
        enable: False
        # go test profile subcommand, OPTIONAL, the given value below is default value
        profile: "-race -covermode=atomic"
        output: "coverage.out"
    docker:
      # docker build/push related, default to false
      enable: False
      # dockerhub image repo
      repo: golang-demo
- name: golang-demo-ci
  plugin:
    # name of the plugin
    kind: gitlabci-golang
    # version of the plugin, checkout the version from the GitHub releases
    version: 0.2.0
  # options for the plugin
  options:
    # owner/repo; "path with namespace" is only GitLab API's way of saying the same thing.
    pathWithNamespace: DO_CHANGE_ME/golang-demo
    # main branch of the repo (to which branch the plugin will submit the workflows)
    branch: main
- name: default
  # plugin profile
  plugin:
    # kind of this plugin
    kind: trello-github-integ
    # version of the plugin
    version: 0.2.0
  # options for the plugin, checkout the version from the GitHub releases
  options:
    # the repo's owner
    owner: DO_CHANGE_ME
    # the repo where you'd like to setup GitHub Actions
    repo: golang-demo
    # integration tool name
    api:
      name: trello
      kanbanBoardName: kanban-name
    # main branch of the repo (to which branch the plugin will submit the workflows)
    branch: main
- name: jira-github-integ-golang-demo
  plugin:
    kind: jira-github-integ
    version: 0.2.0
  options:
    owner: ironcore864
    repo:  golang-demo
    jiraBaseUrl: https://merico.atlassian.net # "base url: https://id.atlassian.net"
    jiraUserEmail: fangbao.li@merico.dev # "need real user email in cloud Jira"
    jiraProjectKey: PROJECT  # "get it from project url, like 'DTM' from https://merico.atlassian.net/jira/software/projects/DTM/pages"
    branch: main
- name: dev
  plugin:
    # name of the plugin
    kind: argocd
    # version of the plugin
    version: 0.0.2
  options:
    # need to create the namespace or not, default: false
    create_namespace: true
    repo:
      # name of the Helm repo
      name: argo
      # url of the Helm repo
      url: https://argoproj.github.io/argo-helm
    # Helm chart information
    chart:
      # name of the chart
      chart_name: argo/argo-cd
      # release name of the chart
      release_name: argocd
      # k8s namespace where argocd will be installed
      namespace: argocd
      # whether to wait for the release to be deployed or not
      wait: true
      # the time to wait for any individual Kubernetes operation (like Jobs for hooks). This defaults to 5m0s
      timeout: 5m
      # whether to perform a CRD upgrade during installation
      upgradeCRDs: true
- name: hello
  plugin:
    # name of the plugin
    kind: argocdapp
    # version of the plugin, checkout the version from the GitHub releases
    version: 0.2.0
  # options for the plugin
  options:
    # information on the ArgoCD application
    app:
      # name of the ArgoCD application
      name: hello
      # where the ArgoCD application CRD will be created
      namespace: argocd
    # destination of the application
    destination:
      # on which server to deploy
      server: https://kubernetes.default.svc
      # in which namespace to deploy
      namespace: default
    # source of the application
    source:
      # which values file to use in the Helm chart
      valuefile: values.yaml
      # path of the Helm chart
      path: charts/DO_CHANGE_ME
      # Helm chart repo URL
      repoURL: https://github.com/DO_CHANGE_ME/DO_CHANGE_ME.git
# name of the instance with kube-prometheus
- name: dev
  plugin:
    # kind of the plugin
    kind: kube-prometheus
    # version of the plugin
    version: 0.2.0
  # options for the plugin
  options:
    # need to create the namespace or not, default: false
    create_namespace: false
    # Helm repo information
    repo:
      # name of the Helm repo
      name: prometheus-community
      # url of the Helm repo
      url: https://prometheus-community.github.io/helm-charts
    # Helm chart information
    chart:
      # name of the chart
      chart_name: prometheus-community/kube-prometheus-stack
      # release name of the chart
      release_name: dev
      # k8s namespace where kube-prometheus will be installed
      namespace: monitoring
      # whether to wait for the release to be deployed or not
      wait: true
      # the time to wait for any individual Kubernetes operation (like Jobs for hooks). This defaults to 5m0s
      timeout: 5m
      # whether to perform a CRD upgrade during installation
      upgradeCRDs: true
- name: devlake
  plugin:
    # kind of the plugin
    kind: devlake
    # version of the plugin
    version: 0.2.0

# name of the instance with jenkins
- name: jenkins-dev # "you need to create the ~/data/jenkins-volumes/ directory first and chown this directory to 1000:1000"
  plugin:
    # kind of the plugin
    kind: jenkins
    # version of the plugin
    version: 0.2.0
  # options for the plugin
  options:
    # need to create the namespace or not, default: false
    create_namespace: false
    # Helm repo information
    repo:
      # name of the Helm repo
      name: jenkins
      # url of the Helm repo
      url: https://charts.jenkins.io
    # Helm chart information
    chart:
      # name of the chart
      chart_name: jenkins/jenkins
      # release name of the chart
      release_name: dev
      # k8s namespace where jenkins will be installed
      namespace: jenkins
      # whether to wait for the release to be deployed or not
      wait: true
      # the time to wait for any individual Kubernetes operation (like Jobs for hooks). This defaults to 5m0s
      timeout: 5m
      # whether to perform a CRD upgrade during installation
      upgradeCRDs: true
